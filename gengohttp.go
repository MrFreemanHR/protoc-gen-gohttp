package main

import (
	"google.golang.org/protobuf/compiler/protogen"
)

var (
	// 	bytesPackage   = protogen.GoImportPath("bytes")
	contextPackage = protogen.GoImportPath("context")

// 	base64Package  = protogen.GoImportPath("encoding/base64")
// 	jsonPackage    = protogen.GoImportPath("encoding/json")
// 	fmtPackage     = protogen.GoImportPath("fmt")
// 	ioPackage      = protogen.GoImportPath("io")
// 	ioutilPackage  = protogen.GoImportPath("io/ioutil")
// 	mimePackage    = protogen.GoImportPath("mime")
// 	httpPackage    = protogen.GoImportPath("net/http")
// 	strconvPackage = protogen.GoImportPath("strconv")
// 	stringsPackage = protogen.GoImportPath("strings")
)

// var (
// 	jsonpbPackage = protogen.GoImportPath("github.com/golang/protobuf/jsonpb")
// 	protoPackage  = protogen.GoImportPath("github.com/golang/protobuf/proto")
// 	grpcPackage   = protogen.GoImportPath("google.golang.org/grpc")
// 	codesPackage  = protogen.GoImportPath("google.golang.org/grpc/codes")
// 	statusPackage = protogen.GoImportPath("google.golang.org/grpc/status")
// )

func GenerateFile(gen *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	filename := file.GeneratedFilenamePrefix + ".http.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)

	g.P("// Code generated by protoc-gen-gohttp. DO NOT EDIT.")
	g.P("// source: ", file.Desc.Path())
	g.P()
	g.P("package ", file.GoPackageName)

	for _, srv := range file.Services {
		genService(g, srv)
	}

	return g
}

func genService(g *protogen.GeneratedFile, srv *protogen.Service) {
	g.P("// ", srv.GoName, "HTTPService is the server API for ", srv.GoName, " service.")
	g.P("type ", srv.GoName, "HTTPService interface {")
	for _, method := range srv.Methods {
		if method.Desc.IsStreamingClient() || method.Desc.IsStreamingServer() {
			continue
		}
		g.P(method.GoName, "(", contextPackage.Ident("Context"), ", *", method.Input.GoIdent.GoName, ") (*", method.Output.GoIdent.GoName, ", error)")
	}
	g.P("}")

	g.P("// ", srv.GoName, "HTTPConverter has a function to convert ", srv.GoName, "HTTPService interface to http.HandlerFunc.")
	g.P("type ", srv.GoName, "HTTPConverter struct {")
	g.P("srv ", srv.GoName, "HTTPService")
	g.P("}")
}
